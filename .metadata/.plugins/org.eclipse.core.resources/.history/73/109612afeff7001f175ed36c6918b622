package Requirements_EV {
	private import ScalarValues::*;
	private import VectorValues::*;
	private import ISQ::*;
	private import SI::*;
	public import 'Vehicle Requirements'::*;
	//public import VehicleActionDefinition::*;
	
	package 'Vehicle Requirements' {
		
		public import ElectricVehicleUsages::*;
		public import ElectricVehicleDefinitions::*;
		
		requirement def <'1'> AutonomousOperationRequirement {
		
			doc /* This requirement handles the capability of fully autonomous functionality under urban and highway conditions. */
			
			attribute LiDARRange: ScalarValues::Number;
			attribute beamDivergence: ScalarValues::Number;
			attribute beamDiv_max: ScalarValues::Number;
			attribute LiDAR_range_min: ScalarValues::Number;
			attribute RadarRange: ScalarValues::Number;
			attribute RadarRangeMin: ScalarValues::Number;			
			attribute cameraPixelation: ScalarValues::Number;
			attribute cameraPixelationMax: ScalarValues::Number;
			attribute cameraView: ScalarValues::Number;
			attribute cameraOverlap: ScalarValues::Number;
			attribute cameraViewRequired: ScalarValues::Number;			
			attribute sensorLatency: ScalarValues::Number;
			attribute sensorLatencyMax: ScalarValues::Number;			
			attribute GPSaccuracy: ScalarValues::Number;
			attribute GPSaccuracyMin: ScalarValues::Number;
			attribute GPSLocation: VectorValues::ThreeVectorValue;
			attribute GPSLocPrev: VectorValues::ThreeVectorValue;
			attribute satteliteCount: ScalarValues::Number;
			attribute satteliteCountMin: ScalarValues::Number;
			attribute SpeedLimit: ScalarValues::Number;
			attribute GPSFrequency: ScalarValues::Number;
			
			
			assume constraint LidarBeamDivConstraint {
				beamDivergence <= beamDiv_max 
			}
			
			assume constraint LidarRangeConstraint {
				LiDARRange > LiDAR_range_min
			}
			
			assume constraint LatencyConstraint {
				sensorLatency <= sensorLatencyMax
			}
			
			assume constraint CameraPixelationConstraint {
				cameraPixelation < cameraPixelationMax 
			}
			
			assume constraint CameraFOVConstraint {
				cameraView - cameraOverlap >= cameraViewRequired 
			}
			
			assume constraint GPSAccuracyConstraint {
				GPSaccuracy >= GPSaccuracyMin & satteliteCount >= satteliteCountMin
			}
			
			assume constraint RadarRangeConstraint {
				RadarRange > RadarRangeMin
			}
			
			assume constraint SpeedLimitationConstraint {
				(GPSLocation - GPSLocPrev) / GPSFrequency < SpeedLimit
			}
		}
		
		requirement def <'2'> PowerRequirement {
		
			doc /* This requirement handles the capability rapid charging and range of the Vehicle. */
			
			attribute LidarRating;
			attribute RadarRating;
			attribute CameraRating;
			attribute MotorRating;
			attribute ProcessorRating;
			attribute GPS_sensorRating;
			attribute BatteryStorageOutMax;
			attribute BatteryCapacity;
			attribute BatteryStorageRequired;
			attribute RolloutMass;
			attribute Mass_Max;
			attribute ChargeRate;
			attribute ChargeRateExpected;
			
			assume constraint batteryOutputConstraint {
				LidarRating + RadarRating + CameraRating + 4 * MotorRating + ProcessorRating + GPS_sensorRating < BatteryStorageOutMax 
			}
			
			assume constraint massConstraint {
				RolloutMass <= Mass_Max
			}
			
			assume constraint batteryChargeSpeedConstraint {
				ChargeRate >= ChargeRateExpected
			}
			
			assume constraint BaatteryConstraint {
				BatteryCapacity > BatteryStorageRequired
			}
		}
		
		requirement def <'3'> ConnectivityRequirement {
			doc /* This requirement handles connectivity and real=time transferral of data */
		
			attribute ConnectivityEncryption;
			attribute ConnectivityEncryptionRequired;
			attribute BluetoothSecurityMode;
			attribute requiredBluetoothSecurityMode;
			attribute WifiSecurityMode;
			attribute requiredWifiSecurityMode;
			attribute Module5GSecurityMode;
			attribute required5GSecurityMode;
			attribute BluetoothCount;
			attribute BluetoothCountRequired;
			
			assume constraint telemetryEncryptionConstraint {
				ConnectivityEncryption == ConnectivityEncryptionRequired
			}
			
			assume constraint BluetoothSecurityandCountConstraint {
				BluetoothCount >= BluetoothCountRequired & BluetoothSecurityMode == requiredBluetoothSecurityMode
			}
			
			assume constraint WifiSecurityConstraint {
				WifiSecurityMode == requiredWifiSecurityMode
			}
			
			assume constraint constraint5G :> ElectricalVehicleDefinitions::Module5GSecurityConstraint {
				Module5GSecurityMode == required5GSecurityMode
			}
		}
		
		requirement def <'4'> MaintenanceRequirement {
			doc /* This requirement handles the upkeep and notification of upkeep */
		}
		
		requirement def <'5'> ModeSwitchRequirement {
			doc /* This requirement handles the ease at which the modes can change */
		}
		
		requirement def <'6'> UIRequirement {
			doc /* This requirement handles the interaction between the user and the vehicle via the UI screen */
		}
	}
	
}