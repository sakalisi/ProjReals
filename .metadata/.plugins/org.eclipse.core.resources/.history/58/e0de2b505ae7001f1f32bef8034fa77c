package ElectricVehicleDefinitions {
	doc
	/*
	 * Electric Vehicle Initial Draft.
	 */

	private import ScalarValues::*;
	private import Quantities::*;
	private import MeasurementReferences::*;
	private import ISQ::*;
	private import SI::*;
	
	/* PART DEFINITIONS */
	
	part def E_Vehicle {
		attribute mass :> ISQ::mass;
		attribute color;
	}
	
	
	/*
	 * Mechanical Components
	 * 
	 */
	part def Transmission;	
	part def AxleAssembly;
	part def Axle {
		port leftMountingPoint: AxleMountIF;
		port rightMountingPoint: AxleMountIF;
	}
	part def Wheel {
		port hub: WheelHubIF;
	}
	part def Lugbolt {
		attribute tighteningTorque :> ISQ::torque;
	}
	
	/*
	 * Electric Components
	 * 
	 */
	 
	part def processor {
		attribute computationSpeed;
		attribute memory;	
	}
	part def CPU :> processor {
        port communication: ComputeCommunicationIF;
        port read: ComputeWithVariableIF;
    }
	part def GPU :> processor {
        port communication: ComputeCommunicationIF;
        port read: ComputeWithVariableIF;
    }
	part def Battery {
		attribute capacity :> ISQ::energy;
	}
	 part def HumanDrivingDevices{
    	port manualcontrol: ManualControlIF;
    }
    part def RemoteDevices{
    	port remotecontrol: RemoteControlIF;
    }
    part def Motor{
    	port MotorHub: MotorHubIF;
    }
    part def UI {
    	port read: ComputeCommunicationIF;
    }
	
	/* Sensor Definitions */
	part def Sensor {
		port input: SensorReadIF;
		attribute output :> ISQ::voltage;
	}
	part def GPS :> Sensor {
    	port communication: ComputeCommunicationIF;  
	}
	part def Lidar :> Sensor{
    	port communication: ComputeCommunicationIF;  
	}
	part def Radar :> Sensor{
    	port communication: ComputeCommunicationIF;  
	}
	part def Speedometer :> Sensor{
    	port communication: ComputeCommunicationIF;  
	}
	part def Microphone :> Sensor{
    	port communication: ComputeCommunicationIF;  
	}
	part def Camera :> Sensor{
    	port communication: ComputeCommunicationIF;  
	}
	
	part def Controller {
		attribute Mode;
		attribute AcceleratorValue;
		attribute BrakeValue;
		attribute TurnAngle;
		
		port inputCommunication: ComputeCommunicationIF;
		port human: ManualControlIF;
		port remote: RemoteControlIF;
	}
	
	
	/*Module Definitions */
	doc /* 
	 * Modules are used to ensure added functionality, like 5G, etc that are not sensors, but provide
	 * better computation ability.
	 */
	part def Module{
		attribute input;
		port output: ComputeCommunicationIF;
	}
	part def connection_5G :> Module;
	part def connection_bluetooth :> Module;
	part def connection_wifi :> Module;
	
	/* Defining the Autopilot Module */
	part def AutonomousDrivingModule {
        part cpu: CPU;
        part gpu: GPU;
        part sensors: Sensor;
        part controller: Controller;
        part module: Module;
        part ui: UI;
    }
	
	part def DriverDrivingModule{
		part human: HumanDrivingDevices;
		part controller: Controller;
		part gps: GPS;
		part ui: UI;
		part cpu: CPU;
	}
	
	part def RemoteDrivingModule{
		part remote: RemoteDevices;
		part controller: Controller;
		part c5g: connection_5G;
		part cw: connection_wifi;
		part cb: connection_bluetooth;
		part sensors: Sensor;
		part ui: UI;
		part cpu: CPU;
	}
	
	/* PORT DEFINITIONS */
	
	port def DriveIF { 
		in driveTorque :> ISQ::torque;
	}
	
	port def AxleMountIF { 
		inout transferredTorque :> ISQ::torque;
	}
	
	port def WheelHubIF { 
		in appliedTorque :> ISQ::torque;
	}
	
	port def MotorHubIF {
		inout wattage :> ISQ::electricPower;
	}
	
	port def BatteryHubIF {
		out wattage :> ISQ::electricPower;
	}
	
	port def SensorReadIF {
		out voltage :> ISQ::voltage;
	}
	
	port def ComputeWithVariableIF {
		inout voltage :> ISQ::voltage;
	}
	
	port def ComputeCommunicationIF{
		inout dataRate;
        inout dataType;
        inout data;
	}
	
	port def ManualControlIF {
    	inout accelerator :> ISQ::force;  
   	 	inout brake :> ISQ::force;  
    	inout turn :> SI::degree;  
	}
	
	port def RemoteControlIF {
    	out accelerator :> ISQ::force;
    	out brake :> ISQ::force;
    	out turn :> SI::degree;
    	out signalStrength :> ISQ::power;  
	}
	
	/* INTERFACE DEFINITIONS */
	
	interface def Mounting {
		doc /* The definition of the interface for mounting a Wheel to an Axle. */
		end axleMount: AxleMountIF;
		end hub: WheelHubIF;
		
		flow axleMount.transferredTorque to hub.appliedTorque;
	}
	
	interface def ComputedPowerSupply {
		doc /* The Overall Definition for power going from battery to motor */
		end battery: BatteryHubIF;
		end sensor: SensorReadIF;
		end motor: MotorHubIF;
		
		flow battery.wattage to motor.wattage;
		flow sensor.voltage to motor.wattage;
	}
	
	interface def motorMovement {
		doc /* 
		 * How the motor is supposed to move, is by converting wattage/current to torque
		 */
		end motor: MotorHubIF;
		end axleMount: AxleMountIF;
		
		flow motor.wattage to axleMount.transferredTorque;
	}
	
	interface def SensorHandle {
		doc /* 
		 * Handling reading sensor and outputting compute voltage
		 */
		end SensorInput: SensorReadIF;
		end read: ComputeWithVariableIF;
		
		flow SensorInput.voltage to read.voltage;
	} 
	
	interface def Forward {
		doc /* Handling reading sensor and outputting compute voltage */
		end compute1: ComputeCommunicationIF;
		end compute2: ComputeCommunicationIF;
		
		flow compute1.dataRate to compute2.dataRate;
		flow compute1.dataType to compute2.dataType;
		flow compute1.data to compute2.data;
	}
	
	interface def ActAuto {
		doc /* Acting on input */
		end input: ComputeCommunicationIF;
		end output: ManualControlIF;
		
		flow input.data to output.accelerator;
		flow input.data to output.brake;
		flow input.data to output.turn;
	}
	
	interface def ActManual {
		doc /* Acting on input */
		end input: ManualControlIF;
		end output: ManualControlIF;
		
		flow input.accelerator to output.accelerator;
		flow input.brake to output.brake;
		flow input.turn to output.turn;
	}
	
	interface def ActRemote {
		doc /* Acting on INput */
		end input: RemoteControlIF;
		end output: ManualControlIF;
		
		flow input.accelerator to output.accelerator;
		flow input.brake to output.brake;
		flow input.turn to output.turn;
	}
	
	
	
}