package ElectricVehicleMissionContext {
	private import CauseAndEffect::*;
	public import ElectricVehicleUsages::*;
	public import ElectricVehicleDefinitions::*;
	public import VehicleActionDefinition::*;
	
	
	package context_defs {
		part vehicle :> E_VehicleTotal;
		
		part def Passenger;
		part def Road;
		part def ModeSelectionUnit {
			item commandChange;
			item def LidarData;
			item def RadarData;
			item def SPDdata;
			item def AudioData;
			item def CamsData;
			item physicalActuatorData;
			item def remoteData;
			port UI_to_ModeSelect : UIToModeSelectIF {
				
			}
			
			exhibit state ModesPossible {
				state manual;
				state remote;
				state autonomous;
				state intermediate;
				
				transition manual_to_autonomous
					first manual
					do send commandChange via UI_to_ModeSelect
					then autonomous;
				transition manual_to_remote
					first manual
					do send commandChange via UI_to_ModeSelect
					then remote;
				transition manual_to_manual
					first manual
					do send physicalActuatorData via vehicle.HumanDrive.actMan
					then manual;
				transition autonomous_to_autonomous
					first autonomous
					do action storeAndUseData : ProcessSensorData {
						bind CamsData to camera.camera;
					}
					then autonomous;
				transition autonomous_to_manual
					first autonomous
					do send commandChange via UI_to_ModeSelect
					then manual;
				transition autonomous_to_remote
					first autonomous
					do send commandChange via UI_to_ModeSelect
					then remote;
					
				transition remote_to_manual
					first remote
					do send commandChange via UI_to_ModeSelect
					then manual;
				transition remote_to_autonomous
					first remote
					do send commandChange via UI_to_ModeSelect
					then autonomous;
				transition remote_to_remote
					first autonomous
					do send remoteData via vehicle.actMan
					then remote;
			}
		}
	}
}