package ElectricVehicleDefinitions {
	doc
	/*
	 * Electric Vehicle Initial Draft.
	 */

	private import ScalarValues::*;
	private import Quantities::*;
	private import MeasurementReferences::*;
	private import ISQ::*;
	private import SI::*;
	
	/* PART DEFINITIONS */
	
	part def E_Vehicle {
		attribute mass :> ISQ::mass;
		attribute color;
	}
	
	
	/*
	 * Mechanical Components
	 * 
	 */
	part def Transmission;	
	part def AxleAssembly;
	part def Axle {
		port leftMountingPoint: AxleMountIF;
		port rightMountingPoint: AxleMountIF;
	}
	part def Wheel {
		port hub: WheelHubIF;
	}
	part def Lugbolt {
		attribute tighteningTorque :> ISQ::torque;
	}
	
	/*
	 * Electric Components
	 * 
	 */
	 
	part def processor {
		attribute computationSpeed;
		attribute memory;	
	}
	part def CPU :> processor {
        port communication: ComputeCommunicationIF;
    }
	part def GPU :> processor {
        port communication: ComputeCommunicationIF;
    }
	part def Battery {
		attribute capacity :> ISQ::energy;
	}
	 part def HumanDrivingDevices{
    	port manualcontrol: ManualControlIF;
    }
    part def RemoteDevices{
    	port remotecontrol: RemoteControlIF;
    }
    part def Motor{
    	port MotorHub: MotorHubIF;
    }
	
	/* Sensor Definitions */
	part def Sensor {
		port input :> SensorReadIF;
		attribute output :> ISQ::voltage;
	}
	part def GPS :> Sensor {
    	port communication: ComputeCommunicationIF;  
	}
	part def Lidar :> Sensor{
    	port communication: ComputeCommunicationIF;  
	}
	part def Radar :> Sensor{
    	port communication: ComputeCommunicationIF;  
	}
	part def Speedometer :> Sensor{
    	port communication: ComputeCommunicationIF;  
	}
	part def Microphone :> Sensor{
    	port communication: ComputeCommunicationIF;  
	}
	part def Camera :> Sensor{
    	port communication: ComputeCommunicationIF;  
	}
	
	part def Controller {
		attribute Mode;
		attribute AcceleratorValue;
		attribute BrakeValue;
		attribute TurnAngle;
		
		port inputCommunication: ComputeCommunicationIF;
		port human: ManualControlIF;
		port remote: RemoteControlIF;
	}
	
	
	/*Module Definitions */
	doc /* 
	 * Modules are used to ensure added functionality, like 5G, etc that are not sensors, but provide
	 * better computation ability.
	 */
	part def Module{
		attribute input;
		attribute output :> ISQ::voltage;
	}
	part def connection_5G :> Module;
	part def connection_bluetooth :> Module;
	part def connection_wifi :> Module;
	
	
	/* PORT DEFINITIONS */
	
	port def DriveIF { 
		in driveTorque :> ISQ::torque;
	}
	
	port def AxleMountIF { 
		out transferredTorque :> ISQ::torque;
	}
	
	port def WheelHubIF { 
		in appliedTorque :> ISQ::torque;
	}
	
	port def MotorHubIF {
		inout wattage :> ISQ::electricPower;
	}
	
	port def BatteryHubIF {
		out wattage :> ISQ::electricPower;
	}
	
	port def SensorReadIF {
		out voltage :> ISQ::voltage;
	}
	
	port def ComputeWithVariableIF {
		inout voltage :> ISQ::voltage;
	}
	
	port def ComputeCommunicationIF{
		inout dataRate;
        inout dataType;
	}
	
	port def ManualControlIF {
    	in accelerator :> ISQ::force;  
   	 	in brake :> ISQ::force;  
    	in turn :> SI::degree;  
	}
	
	port def RemoteControlIF {
    	in accelerator :> ISQ::force;
    	in brake :> ISQ::force;
    	in turn :> SI::degree;
    	in signalStrength :> ISQ::power;  
	}
	
	/* INTERFACE DEFINITIONS */
	
	interface def Mounting {
		doc /* The definition of the interface for mounting a Wheel to an Axle. */
		end axleMount: AxleMountIF;
		end hub: WheelHubIF;
		
		flow axleMount.transferredTorque to hub.appliedTorque;
	}
	
	interface def ComputedPowerSupply {
		doc /* The Overall Definition for power going from battery to motor */
		end battery: BatteryHubIF;
		end sensor: SensorReadIF;
		end motor: MotorHubIF;
		
		flow battery.wattage to motor.wattage;
		flow sensor.voltage to motor.wattage;
	}
	
	interface def motorMovement {
		doc /* How the motor is supposed to move, is by converting wattage/current to torque */
		end motor: MotorHubIF;
		end axleMount: AxleMountIF;
		
		flow motor.wattage to axleMount.transferredTorque;
	}
	
	interface def SensorHandle {
		doc /* Handling reading sensor and outputting compute voltage*/
		end SensorInput: SensorReadIF;
		end compute: ComputeWithVariableIF;
		
		flow SensorInput.voltage to compute.voltage;
	}
	
	/* Defining the Autopilot Module */
	part def AutonomousDrivingModule {
        part cpu: CPU;
        part gpu: GPU;
        part sensors: Sensor;
        part controller: Controller;
        part module: Module;

        flow module.output to sensors.input;
        flow sensors.output to cpu.communication;
        flow cpu.communication to gpu.communication;
        flow gpu.communication to controller.inputCommunication;
    }
	
	part def DriverDrivingModule{
		part human: HumanDrivingDevices;
		part controller: Controller;
		part module: Module;
		part sensors: Sensor;
		
		flow module.output to sensors.input;
		flow human.manualcontrol to controller.human;
		
	}
	
	part def RemoteDrivingModule{
		part remote: RemoteDevices;
		part controller: Controller;
		part module: Module;
		part sensors: Sensor;
		
		flow module.output to sensors.input;
		flow remote.remotecontrol to controller.remote;
	}
	
}