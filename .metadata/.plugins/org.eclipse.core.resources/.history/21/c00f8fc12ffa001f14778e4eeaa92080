package Requirements_EV {
	private import ScalarValues::*;
	private import VectorValues::*;
	private import ISQ::*;
	private import SI::*;
	public import 'Vehicle Requirements'::*;
	//public import VehicleActionDefinition::*;
	
	package 'Vehicle Requirements' {
		
		public import ElectricVehicleUsages::*;
		public import ElectricVehicleDefinitions::*;
		
		Threshold = 5;
		
		requirement def <'1'> AutonomousOperationRequirement {
		
			doc /* This requirement handles the capability of fully autonomous functionality under urban and highway conditions. */
			
			attribute LiDARRange: ScalarValues::Number;
			attribute beamDivergence: ScalarValues::Number;
			attribute beamDiv_max: ScalarValues::Number;
			attribute LiDAR_range_min: ScalarValues::Number;
			attribute RadarRange: ScalarValues::Number;
			attribute RadarRangeMin: ScalarValues::Number;			
			attribute cameraPixelation: ScalarValues::Number;
			attribute cameraPixelationMax: ScalarValues::Number;
			attribute cameraView: ScalarValues::Number;
			attribute cameraOverlap: ScalarValues::Number;
			attribute cameraViewRequired: ScalarValues::Number;			
			attribute sensorLatency: ScalarValues::Number;
			attribute sensorLatencyMax: ScalarValues::Number;			
			attribute GPSaccuracy: ScalarValues::Number;
			attribute GPSaccuracyMin: ScalarValues::Number;
			attribute GPSLocation: VectorValues::ThreeVectorValue;
			attribute GPSLocPrev: VectorValues::ThreeVectorValue;
			attribute satteliteCount: ScalarValues::Number;
			attribute satteliteCountMin: ScalarValues::Number;
			attribute SpeedLimit: ScalarValues::Number;
			attribute GPSFrequency: ScalarValues::Number;
			
			
			assume constraint constraintLidarAccuracy: LidarBeamDivConstraint {
				beamDivergence <= beamDiv_max 
			}
			
			assume constraint constraintLidarRange: LidarRangeConstraint {
				LiDARRange > LiDAR_range_min
			}
			
			assume constraint constraintSensorLatency: LatencyConstraint {
				sensorLatency <= sensorLatencyMax
			}
			
			assume constraint constraintCameraAccuracy: CameraPixelationConstraint {
				cameraPixelation < cameraPixelationMax 
			}
			
			assume constraint constraintCameraRange: CameraFOVConstraint {
				cameraView - cameraOverlap >= cameraViewRequired 
			}
			
			assume constraint constraintGPSAccuracy: GPSAccuracyConstraint {
				GPSaccuracy >= GPSaccuracyMin & satteliteCount >= satteliteCountMin
			}
			
			assume constraint constraintRadarRange: RadarRangeConstraint {
				RadarRange > RadarRangeMin
			}
			
			assume constraint constraintLawfulSpeed: SpeedLimitationConstraint {
				(GPSLocation - GPSLocPrev) / GPSFrequency < SpeedLimit
			}
		}
		
		requirement <'1.1'> example1: AutonomousOperationRequirement {
			subject vehicle:> E_VehicleTotal;
			
			attribute :>> LiDARRange = vehicle.LIDAR.range;
			attribute :>> beamDivergence = vehicle.LIDAR.beamDivergence;
			attribute :>> beamDiv_max = 0.1 [SI::degree];
			attribute :>> LiDAR_range_min = 200 [m];
			
			attribute :>> RadarRange = vehicle.RADAR.range;
			attribute :>> RadarRangeMin = 150 [m];			
			attribute :>> cameraPixelation = vehicle.Cams.pixelation;
			attribute :>> cameraPixelationMax = 3980; //equivalent to 4K HD
			attribute :>> cameraView = vehicle.Cams(1..2).fieldOfView;
			attribute :>> cameraOverlap = vehicle.Cams(3).fieldOfView;
			attribute :>> cameraViewRequired = 360 [SI::degree];			
			
			attribute :>> sensorLatency = ScalarFunctions::max(vehicle.LIDAR.latency, vehicle.RADAR.latency, vehicle.SPD_Meter.latency, vehicle.Mic.latency, vehicle.Cams.latency, vehicle.GPS_Module.latency);
			attribute :>> sensorLatencyMax = 0.1 [s];			
			attribute :>> GPSaccuracy = vehicle.GPS_Module.accuracy;
			attribute :>> GPSaccuracyMin = 1 [m];
			attribute :>> GPSLocation = vehicle.GPS_Module.currentLocation;
			attribute :>> GPSLocPrev = vehicle.AutonomousDrive.cpu.storedMemGPSPrevLocation;
			attribute :>> satteliteCount = vehicle.GPS_Module.satelliteCount;
			attribute :>> satteliteCountMin = 3;
			attribute :>> SpeedLimit = vehicle.GPS_Module.currentSpeedLimit;
			attribute :>> GPSFrequency = vehicle.GPS_Module.frequencyOfUpdates;
		}
		
		requirement def <'2'> PowerRequirement {
		
			doc /* This requirement handles the capability rapid charging and range of the Vehicle. */
			
			attribute LidarRating;
			attribute RadarRating;
			attribute CameraRating;
			attribute MotorRating;
			attribute ProcessorRating;
			attribute GPS_sensorRating;
			attribute BatteryStorageOutMax;
			attribute BatteryCapacity;
			attribute BatteryStorageRequired;
			attribute RolloutMass;
			attribute Mass_Max;
			attribute ChargeRate;
			attribute ChargeRateExpected;
			
			assume constraint constraintBatteryOutput: batteryOutputConstraint {
				LidarRating + RadarRating + CameraRating + 4 * MotorRating + ProcessorRating + GPS_sensorRating < BatteryStorageOutMax 
			}
			
			assume constraint constraintMass: massConstraint {
				RolloutMass <= Mass_Max
			}
			
			assume constraint constraintBatterySpeed: batteryChargeSpeedConstraint {
				ChargeRate >= ChargeRateExpected
			}
			
			assume constraint constraintBatteryStorage: BatteryConstraint {
				BatteryCapacity > BatteryStorageRequired
			}
		}
		
		requirement <'2.1'> example2: PowerRequirement {
			subject vehicle:> E_VehicleTotal;
			
			attribute :>> LidarRating = vehicle.LIDAR.rating;
			attribute :>> RadarRating = vehicle.RADAR.rating;
			attribute :>> CameraRating = vehicle.Cams.rating;
			attribute :>> MotorRating = vehicle.motor_C3.rating * 4;
			attribute :>> ProcessorRating = vehicle.AutonomousDrive.gpu.rating + vehicle.AutonomousDrive.cpu.rating;
			attribute :>> GPS_sensorRating = vehicle.GPS_Module.rating;
			attribute :>> BatteryStorageOutMax = vehicle.batt.output;
			attribute :>> BatteryCapacity = vehicle.batt.capacity;
			attribute :>> BatteryStorageRequired = 80 [h * kW];
			attribute :>> RolloutMass = vehicle.transmission.mass + (vehicle.rearAxleAssembly.rearWheel.mass * 2) + (vehicle.frontAxleAssembly.frontWheel.mass * 2) + (4 * vehicle.motor_C3.mass);
			attribute :>> Mass_Max = 2000 [kg];
			attribute :>> ChargeRate = vehicle.batt.chargeRate;
			attribute :>> ChargeRateExpected = 1 [h];
		}
		
		requirement def <'3'> ConnectivityRequirement {
			doc /* This requirement handles connectivity and real=time transferral of data */
		
			attribute ConnectivityEncryption;
			attribute ConnectivityEncryptionRequired;
			attribute BluetoothSecurityMode;
			attribute requiredBluetoothSecurityMode;
			attribute WifiSecurityMode;
			attribute requiredWifiSecurityMode;
			attribute Module5GSecurityMode;
			attribute required5GSecurityMode;
			attribute BluetoothCount;
			attribute BluetoothCountRequired;
			
			assume constraint constraintSecurityGPS: telemetryEncryptionConstraint {
				ConnectivityEncryption == ConnectivityEncryptionRequired
			}
			
			assume constraint constraintBluetooth: BluetoothSecurityandCountConstraint {
				BluetoothCount >= BluetoothCountRequired & BluetoothSecurityMode == requiredBluetoothSecurityMode
			}
			
			assume constraint constraintWifi: WifiSecurityConstraint {
				WifiSecurityMode == requiredWifiSecurityMode
			}
			
			assume constraint constraint5G: Module5GSecurityConstraint {
				Module5GSecurityMode == required5GSecurityMode
			}
		}
		
		requirement def <'4'> MaintenanceRequirement {
			doc /* This requirement handles the upkeep and notification of upkeep */
			
			attribute anomalySensorLimit;
			attribute anomalySensorFound;
			attribute TimeSincePreviousMaintenance;
			attribute MaxTimeBetweenMaintenance;
			
			assume constraint constraintRegularMainenance: RegularMaintenanceConstraint{
				doc /* maximum time should not be met. If it has, the UI needs to mention maintenance is required */
				
				TimeSincePreviousMaintenance < MaxTimeBetweenMaintenance
			}
			
			assume constraint constraintSensors: sensorAnomalyConstraint {
				doc /* maximum anomalieswhile doing diagnostics should not exceed the limit. Else, maintenance is required */
				
				anomalySensorFound < anomalySensorLimit
			}
		}
		
		requirement def <'5'> ModeSwitchRequirement {
			doc /* This requirement handles the ease at which the modes can change */
			
			attribute CPUModeChangeConsideration;
			attribute maxAcceptableLatency;
			
			assume constraint constraintLatencyModeSwitch: modeLatencyConstraint{
				CPUModeChangeConsideration < maxAcceptableLatency
			}
		}
		
		requirement def <'6'> UIRequirement {
			doc /* This requirement handles the interaction between the user and the vehicle via the UI screen */
			
			attribute currentMode;
			attribute displayMode;
			attribute currentSpeed;
			attribute displaySpeed;
			attribute currentLocation;
			attribute displayLocation;
			
			assume constraint constraintModeDisplay: modeDisplayConstraint {
				currentMode == displayMode
			}
			
			assume constraint constraintSpeedDisplay:speedDisplayConstraint {
				currentSpeed > 0.9 * displaySpeed | currentSpeed < 1.1 * displaySpeed
			} 
			
			assume constraint constraintLocationDisplay: locationDisplayConstraint {
				currentLocation < Threshold + displayLocation | currentLocation > displayLocation - Threshold
			}
		}
	}
	
}