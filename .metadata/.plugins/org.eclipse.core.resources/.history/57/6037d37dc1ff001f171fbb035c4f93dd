package 'ElectricVehicleAnalysis' {
	private import ScalarValues::Real;
	private import SI::*;
	private import 'Calculation Definitions'::*;
	private import 'Analytical Constraints'::*;
	private import USCustomaryUnits::*;
	private import SequenceFunctions::size;
	private import Quantities::ScalarQuantityValue;
	private import ControlFunctions::*;
	private import ScalarValues::Positive;
	public import ElectricVehicleUsages::*;
	public import Requirements_EV::*;
	public import ElectricVehicleDefinitions::*;
	public import ActionDefinition::*;
	
	attribute def DistancePerEnergyValue :> ScalarQuantityValue;
	
	attribute def WayPoint {
		timeSwap : TimeValue;
		timePrevAction :TimeValue;
		mode : Mode;
		speed : SpeedValue;    	
	}
	
	analysis def ModeSwappingLatency {
		subject e_vehicle :> E_VehicleTotal;
		objective switchLatency : ModeSwitchRequirement {
			/*
			 * The objective of this analysis is to determine whether the
			 * subject vehicle can satisfy the minimum latency requirement.
			 */
			
			assume constraint  {
				e_vehicle.cpu.ProcessorClockRate == 100 [1/s]
			}
			
			require constraint constraint_forCheckingLatency: modeLatencyConstraint{
				clockLatencySwitch < 0.1 [s]
			}
		}
		
		in attribute scenario : WayPoint[*];
	
		action solveForPower {
			out power : PowerValue[*];
			out acceleration : AccelerationValue[*];
		
			/*
			 * Solve for the required engine power as a function of time
			 * to support the scenario.
			 */
			assert constraint {
				(1..size(scenario)-1)->forAll {in i: Positive;
					StraightLineDynamicsEquations (
						power#(i),
						e_vehicle.mass,
						scenario.time#(i+1) - scenario.time#(i),
						scenario.position#(i),
						scenario.speed#(i),
						scenario.position#(i+1),
						scenario.speed#(i+1),
						acceleration#(i+1)                    
					)
				}
			}
		}
		
		then action solveForFuelConsumption {
			in power : PowerValue[*] = solveForPower.power;
			out fuelEconomy : DistancePerEnergyValue;
		
			/*
			 * Solve for energy used in terms of kilowhatt hours. 
			 */
		}
		
        return clockLatencySwitch : DistancePerEnergyValue = solveForFuelConsumption.fuelEconomy;
	}
}