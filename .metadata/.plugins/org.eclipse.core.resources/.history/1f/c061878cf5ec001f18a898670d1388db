package ElectricVehicleUsages {
	doc
	/*
	 * Example usages of elements from the vehicle definitions model.
	 */

	private import SI::N;
	private import SI::m;
	private import ScalarFunctions::*;

	public import ElectricVehicleDefinitions::*;

	/* VALUES */	 
	T1 = 10.0 [N * m];
	T2 = 20.0 [N * m];
	
	/* PARTS */	
	part narrowRimWheel: Wheel {
		doc /* Narrow-rim wheel configuration with 4 to 5 lugbolts. */

		part lugbolt: Lugbolt[4..5];
	}
	
	part wideRimWheel: Wheel {
		doc /* Wide-rim wheel configuration with 4 to 6 lugbolts. */	

		part lugbolt: Lugbolt[4..6];
	}

	part vehicle_C1: E_Vehicle {
		doc /* Basic Vehicle configuration showing a part hierarchy. */

		part frontAxleAssembly: AxleAssembly {
			part frontWheel[2] subsets narrowRimWheel {
				part redefines lugbolt[4] {
					attribute redefines tighteningTorque = T1;
				}
			}
			part frontAxle: Axle;
		}		
		part rearAxleAssembly: AxleAssembly {
			part rearWheel[2] subsets wideRimWheel {
				part redefines lugbolt[6] {
					attribute redefines tighteningTorque = T2;
				}
			}
			part rearAxle: Axle;			
		}
		
		part motor_C3[4]: Motor {
			port motorHub: MotorHubIF;
		}
	}
	
	part vehicle_C2 subsets vehicle_C1 {
		doc /* Specialized configuration with part-specific ports. */
		
		part redefines frontAxleAssembly {
			part leftFrontMotor subsets motor_C3 = motor_C3#(1);
			part rightFrontMotor subsets motor_C3 = motor_C3#(2);
			part leftFrontWheel subsets frontWheel = frontWheel#(1);
			part rightFrontWheel subsets frontWheel = frontWheel#(2);
			
			interface leftFrontMount: Mounting connect 
				frontAxle.leftMountingPoint to leftFrontWheel.hub;
			interface leftFrontMove: motorMovement connect
				leftFrontMotor.motorHub to frontAxle.leftMountingPoint;
			interface rightFrontMount: Mounting connect 
				frontAxle.rightMountingPoint to rightFrontWheel.hub;
			interface RightFrontMove: motorMovement connect
				rightFrontMotor.motorHub to frontAxle.rightMountingPoint;
		}
		
		part rearAxleAssembly redefines vehicle_C1::rearAxleAssembly {
			part leftRearMotor subsets motor_C3 = motor_C3#(3);
			part rightRearMotor subsets motor_C3 = motor_C3#(4);
			part leftRearWheel subsets rearWheel = rearWheel#(1);
			part rightRearWheel subsets rearWheel = rearWheel#(2);

			interface leftRearMount: Mounting connect 
				rearAxle.leftMountingPoint to leftRearWheel.hub;
			interface leftRearMove: motorMovement connect
				leftRearMotor.motorHub to rearAxle.leftMountingPoint;
			interface rightRearMount: Mounting connect 
				rearAxle.rightMountingPoint to rightRearWheel.hub;
			interface rightRearMove: motorMovement connect
				rightRearMotor.motorHub to rearAxle.rightMountingPoint;
		}		
	}
	
	part vehicle_C3 subsets vehicle_C2 {
		doc /* Further specialized configuration with a connection to a deeply-nested port. */
		
			part LIDAR: Lidar;
			part RADAR: Radar;
			part SPD_Meter: Speedometer;
			part Mic: Microphone;
			part Cams: Camera [3];
		
		part transmission: Transmission {
			port drive: ~DriveIF;
		}
		
		part redefines rearAxleAssembly {
			part redefines rearAxle {
				port drive: DriveIF;
			}
		}
		
		interface driveShaft connect 
			transDrive ::> transmission.drive to axleDrive ::> rearAxleAssembly.rearAxle.drive {
			flow transDrive.driveTorque to axleDrive.driveTorque;
		}
		
		
		
	}
	
	part E_Vehicle_Automatic subsets vehicle_C3 {
		part AutonomousDrive: AutonomousDrivingModule {
			
			interface HandleLIDAR: SensorHandle connect
				LIDAR.input to cpu.read;
			interface HandleRADAR: SensorHandle connect
				RADAR.input to cpu.read;
			interface HandleSPD_Meter: SensorHandle connect
				SPD_Meter.input to cpu.read;
			interface HandleMic: SensorHandle connect
				Mic.input to cpu.read;
			interface HandleCams: SensorHandle connect
				Cams.input to cpu.read;
			interface CNNInterface: Forward connect
				cpu.communication to gpu.communication;
			interface Act: ActAuto connect
				gpu.communication to controller.inputCommunication;
			interface UIComs: Forward connect
				cpu.communication to ui.read;
			interface motorCtrl: controlMotor connect
			`	gpu.write to motor_C3.motorHub;
		}	
	}
		
	part E_Vehicle_Manual subsets vehicle_C3 {
		part HumanDrive: DriverDrivingModule {
			part RADAR: Radar;
			part SPD_Meter: Speedometer;
			part Cams: Camera [3];
			
			interface HandleRADAR: SensorHandle connect
				RADAR.input to cpu.read;
			interface HandleSPD_Meter: SensorHandle connect
				SPD_Meter.input to cpu.read;
			interface HandleCams: SensorHandle connect
				Cams.input to cpu.read;
			interface actMan: ActManual connect
				human.manualcontrol to controller.human;
			interface UIComs: Forward connect
				cpu.communication to ui.read;
			interface motorCtrl: controlMotor connect
			`	cpu.write to motor_C3.motorHub;
		}	
	}
	
	part E_Vehicle_Remote subsets vehicle_C3 {
		part RemoteDrive: RemoteDrivingModule {
			part RADAR: Radar;
			part SPD_Meter: Speedometer;
			part Cams: Camera [3];
			
			interface HandleRADAR: SensorHandle connect
				RADAR.input to cpu.read;
			interface HandleSPD_Meter: SensorHandle connect
				SPD_Meter.input to cpu.read;
			interface HandleCams: SensorHandle connect
				Cams.input to cpu.read;
			interface transmitComs5G: Forward connect
				c5g.output to cpu.communication;
			interface transmitComsWifi: Forward connect
				cw.output to cpu.communication;
			interface transmitComsBluetooth: Forward connect
				cb.output to cpu.communication;
			interface actMan: ActManual connect
				cpu.communication to controller.remote;
			interface UIComs: Forward connect
				cpu.communication to ui.read;
			interface motorCtrl: controlMotor connect
			`	cpu.write to motor_C3.motorHub;
		}	
	}	
	
	part E_VehicleTotal subsets E_Vehicle_Remote, E_Vehicle_Automatic, E_Vehicle_Manual;

}